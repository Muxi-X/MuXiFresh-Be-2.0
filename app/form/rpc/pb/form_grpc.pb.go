// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: form.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EntryFormClient_JudgeUser_FullMethodName          = "/form.EntryFormClient/JudgeUser"
	EntryFormClient_CreateForm_FullMethodName         = "/form.EntryFormClient/CreateForm"
	EntryFormClient_UpdateForm_FullMethodName         = "/form.EntryFormClient/UpdateForm"
	EntryFormClient_CheckForm_FullMethodName          = "/form.EntryFormClient/CheckForm"
	EntryFormClient_GetApplicantNumber_FullMethodName = "/form.EntryFormClient/GetApplicantNumber"
)

// EntryFormClientClient is the client API for EntryFormClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntryFormClientClient interface {
	JudgeUser(ctx context.Context, in *ClickReq, opts ...grpc.CallOption) (*ClickResp, error)
	CreateForm(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error)
	UpdateForm(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error)
	CheckForm(ctx context.Context, in *CheckReq, opts ...grpc.CallOption) (*CheckResp, error)
	GetApplicantNumber(ctx context.Context, in *GetApplicantNumberReq, opts ...grpc.CallOption) (*GetApplicantNumberResp, error)
}

type entryFormClientClient struct {
	cc grpc.ClientConnInterface
}

func NewEntryFormClientClient(cc grpc.ClientConnInterface) EntryFormClientClient {
	return &entryFormClientClient{cc}
}

func (c *entryFormClientClient) JudgeUser(ctx context.Context, in *ClickReq, opts ...grpc.CallOption) (*ClickResp, error) {
	out := new(ClickResp)
	err := c.cc.Invoke(ctx, EntryFormClient_JudgeUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryFormClientClient) CreateForm(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, EntryFormClient_CreateForm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryFormClientClient) UpdateForm(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, EntryFormClient_UpdateForm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryFormClientClient) CheckForm(ctx context.Context, in *CheckReq, opts ...grpc.CallOption) (*CheckResp, error) {
	out := new(CheckResp)
	err := c.cc.Invoke(ctx, EntryFormClient_CheckForm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryFormClientClient) GetApplicantNumber(ctx context.Context, in *GetApplicantNumberReq, opts ...grpc.CallOption) (*GetApplicantNumberResp, error) {
	out := new(GetApplicantNumberResp)
	err := c.cc.Invoke(ctx, EntryFormClient_GetApplicantNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntryFormClientServer is the server API for EntryFormClient service.
// All implementations must embed UnimplementedEntryFormClientServer
// for forward compatibility
type EntryFormClientServer interface {
	JudgeUser(context.Context, *ClickReq) (*ClickResp, error)
	CreateForm(context.Context, *CreateReq) (*CreateResp, error)
	UpdateForm(context.Context, *CreateReq) (*CreateResp, error)
	CheckForm(context.Context, *CheckReq) (*CheckResp, error)
	GetApplicantNumber(context.Context, *GetApplicantNumberReq) (*GetApplicantNumberResp, error)
	mustEmbedUnimplementedEntryFormClientServer()
}

// UnimplementedEntryFormClientServer must be embedded to have forward compatible implementations.
type UnimplementedEntryFormClientServer struct {
}

func (UnimplementedEntryFormClientServer) JudgeUser(context.Context, *ClickReq) (*ClickResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JudgeUser not implemented")
}
func (UnimplementedEntryFormClientServer) CreateForm(context.Context, *CreateReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForm not implemented")
}
func (UnimplementedEntryFormClientServer) UpdateForm(context.Context, *CreateReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateForm not implemented")
}
func (UnimplementedEntryFormClientServer) CheckForm(context.Context, *CheckReq) (*CheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForm not implemented")
}
func (UnimplementedEntryFormClientServer) GetApplicantNumber(context.Context, *GetApplicantNumberReq) (*GetApplicantNumberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicantNumber not implemented")
}
func (UnimplementedEntryFormClientServer) mustEmbedUnimplementedEntryFormClientServer() {}

// UnsafeEntryFormClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntryFormClientServer will
// result in compilation errors.
type UnsafeEntryFormClientServer interface {
	mustEmbedUnimplementedEntryFormClientServer()
}

func RegisterEntryFormClientServer(s grpc.ServiceRegistrar, srv EntryFormClientServer) {
	s.RegisterService(&EntryFormClient_ServiceDesc, srv)
}

func _EntryFormClient_JudgeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryFormClientServer).JudgeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntryFormClient_JudgeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryFormClientServer).JudgeUser(ctx, req.(*ClickReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryFormClient_CreateForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryFormClientServer).CreateForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntryFormClient_CreateForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryFormClientServer).CreateForm(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryFormClient_UpdateForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryFormClientServer).UpdateForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntryFormClient_UpdateForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryFormClientServer).UpdateForm(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryFormClient_CheckForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryFormClientServer).CheckForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntryFormClient_CheckForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryFormClientServer).CheckForm(ctx, req.(*CheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryFormClient_GetApplicantNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicantNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryFormClientServer).GetApplicantNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntryFormClient_GetApplicantNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryFormClientServer).GetApplicantNumber(ctx, req.(*GetApplicantNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EntryFormClient_ServiceDesc is the grpc.ServiceDesc for EntryFormClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntryFormClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "form.EntryFormClient",
	HandlerType: (*EntryFormClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JudgeUser",
			Handler:    _EntryFormClient_JudgeUser_Handler,
		},
		{
			MethodName: "CreateForm",
			Handler:    _EntryFormClient_CreateForm_Handler,
		},
		{
			MethodName: "UpdateForm",
			Handler:    _EntryFormClient_UpdateForm_Handler,
		},
		{
			MethodName: "CheckForm",
			Handler:    _EntryFormClient_CheckForm_Handler,
		},
		{
			MethodName: "GetApplicantNumber",
			Handler:    _EntryFormClient_GetApplicantNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "form.proto",
}
